<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text"></title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-03-02T22:11:40-05:00</updated>
<id>/</id>
<author>
  <name></name>
  <uri>/</uri>
  <email></email>
</author>


<entry>
  <title type="html"><![CDATA[From Bitmaker to Breather]]></title>
 <link rel="alternate" type="text/html" href="/from-bitmaker-to-breather" />
  <id>/from-bitmaker-to-breather</id>
  <published>2015-03-03T00:00:00-05:00</published>
  <updated>2015-03-03T00:00:00-05:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;h1&gt;From Bitmaker to Breather&lt;/h1&gt;

&lt;h2&gt;Part 1: A QuickStart™ Guide to Making Things on the Internet&lt;/h2&gt;

&lt;figure&gt;
&lt;img src=&quot;https://farm9.staticflickr.com/8623/16700247455_0428d2d478_h.jpg&quot; alt=&quot;Baby&#39;s first hackathon&quot;&gt;&lt;figcaption&gt;Baby’s first hackathon: Brandon, Vlad, Hassan and I made &lt;a href=&quot;http://beachcoli.herokuapp.com/&quot;&gt;BeachColi&lt;/a&gt; at AngelHack in June 2014. Our caffeine-addled brains thought it was The Best Name Ever circa 1:30 am. It still is.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It was a little more than a year ago that I made what was, in retrospect, a rather large, life-altering decision: &lt;a href=&quot;https://twitter.com/alessbell/status/420557380997230594&quot;&gt;I signed up for Bitmaker Labs&lt;/a&gt;. Despite my best efforts to document the process, I only ended up writing a total of &lt;a href=&quot;http://aless.co/hello-world/&quot;&gt;three&lt;/a&gt; &lt;a href=&quot;http://aless.co/code-and-camaraderie/&quot;&gt;blog&lt;/a&gt; &lt;a href=&quot;http://aless.co/coding-does-not-equal-computer-science/&quot;&gt;posts&lt;/a&gt; during my time as a student, but I remember how useful the blogs of past cohorts were in helping me decide that a bootcamp like Bitmaker was the educational environment I was looking for. After the program, however, many student blogs go dark: surprisingly, life after Bitmaker can be even more hectic than life at 220 King Street West.&lt;/p&gt;

&lt;p&gt;This is my attempt to remedy the situation. Over the course of a few posts, I hope to provide anyone who may be considering Bitmaker Labs or a similar program not only a snapshot of my time as a Bitmaker student, but a quick look at my experiences as a recent grad as I searched for a job, entered the workforce and found myself joining the best team I could have hoped for at a company called &lt;a href=&quot;http://breather.com/&quot;&gt;Breather&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How To Drink From a Firehose: A Beginner’s Guide&lt;/h2&gt;

&lt;p&gt;Throughout my undergraduate degree in philosophy and political science at the University of Toronto, I found myself taking on freelance web design and development jobs out of sheer enjoyment. The Jessica Hische-ism “procrastiwork” always felt particularly apt: making things on the internet was the work I did when I should have been doing other, more important work.&lt;/p&gt;

&lt;p&gt;In my final year of university, I got bored of making static web pages so I signed up for &lt;a href=&quot;https://onemonth.com/courses/one-month-rails/&quot;&gt;One Month Rails&lt;/a&gt; and started learning ruby at night. This turned out to be a lot more fun but also more difficult than expected: I’d start making meaningful progress only to have my busy school schedule take over. Weeks later, I’d come back to programming, resigned to repeating lessons I’d already completed and managed to forget. Bitmaker Labs was, for me, the answer to a persistent question: how can I learn to make better things on the web? When I sat down with Erik and Minh in my December 2013 interview at Bitmaker’s old location on Duncan Street, they asked what I would do if I didn’t receive an invitation to join Bitmaker’s summer 2014 cohort. I didn’t have to think about the answer: “I’ll keep learning how to build Rails apps, it might just take me a bit longer.”&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;The &lt;a href=&quot;https://twitter.com/bitmakerlabs&quot;&gt;@bitmakerlabs&lt;/a&gt; teams! &lt;a href=&quot;https://twitter.com/hashtag/AngelHackTO?src=hash&quot;&gt;#AngelHackTO&lt;/a&gt; &lt;a href=&quot;http://t.co/FPAvZgCfw1&quot;&gt;pic.twitter.com/FPAvZgCfw1&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alessia Bellisario (@alessbell) &lt;a href=&quot;https://twitter.com/alessbell/status/480366566325108736&quot;&gt;June 21, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;A passion for programming is something I saw in nearly all of my classmates, and I think it’s the closest thing to a prerequisite for courses like Bitmaker’s. In the past few years, bootcamps have come to constitute a new category in education, and self-motivated learning is at its core. Your instructors are there to help you, but not to force you to work or reprimand you for skipping your homework three nights in a row. This is a feature, not a bug, of the bootcamp model. When prospective students ask me for advice, my first tip is to build something before sending in an application to be sure you enjoy the actual practice of programming: if you don’t, you likely won’t enjoy doing it for twelve hours a day, nine weeks in a row.&lt;/p&gt;

&lt;p&gt;As for more granular tips on learning to program, I’ll defer to &lt;a href=&quot;http://christinacacioppo.com/blog/build-products&quot;&gt;the definitive post on the topic by Christina Cacioppo&lt;/a&gt;. It was written after I finished Bitmaker, but there isn’t a single piece observation out of place.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Today&amp;#39;s lesson &lt;a href=&quot;https://twitter.com/bitmakerlabs&quot;&gt;@bitmakerlabs&lt;/a&gt;: good design practices + &lt;a href=&quot;http://t.co/o74QTRCARU&quot;&gt;http://t.co/o74QTRCARU&lt;/a&gt;.&amp;#10;&amp;#10;Kidding! It&amp;#39;s jQuery. Totally jQuery...&lt;/p&gt;&amp;mdash; Alessia Bellisario (@alessbell) &lt;a href=&quot;https://twitter.com/alessbell/status/485073638946000896&quot;&gt;July 4, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;I can share more specific advice on what is and isn’t important while gearing up for the course, however. When I first started making my way through the prep material in May 2014, I found myself gravitating toward blog posts about spaced repetition memorization and other memory hacks. “Flash cards!” I’d think to myself wistfully, “at last, the answer to my problems.” Invariably, flash cards can be useful in retaining new material (and there are lots of great free tools like &lt;a href=&quot;http://ankisrs.net/&quot;&gt;Anki&lt;/a&gt; if you’re interested). In retrospect, though, my search for a single unifying approach to learning ruby was flawed.&lt;/p&gt;

&lt;p&gt;When I think about the time I spent exploring different study strategies — some of it well spent, some not so well spent— one of Ben Horowitz’s famous lessons from his Netscape years comes to mind: &lt;a href=&quot;http://www.bhorowitz.com/lead_bullets&quot;&gt;there is no silver bullet, only a lot of lead bullets&lt;/a&gt;. Learning to build things you’ve never built before is really a function of hard work and persistence. It’s easy to feel discouraged — I certainly did!— but if you don’t fully grasp a concept today, trust that you’ll get it tomorrow, or the day after that. One day, as it tends to go, you’ll eventually be right. As Christina Cacioppo puts it rather bluntly: “Learning to program requires tenacity, not brilliance. Most professional programming isn’t rocket science, metaphorically or actually.”&lt;/p&gt;

&lt;figure&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;The best/worst thing that ever happened to my git commits was &lt;a href=&quot;http://t.co/cjHW09VDos&quot;&gt;http://t.co/cjHW09VDos&lt;/a&gt;. &amp;#10;&amp;#10;No regrets✌️ &lt;a href=&quot;http://t.co/3HOQ2fat9c&quot;&gt;pic.twitter.com/3HOQ2fat9c&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alessia Bellisario (@alessbell) &lt;a href=&quot;https://twitter.com/alessbell/status/487339135741726720&quot;&gt;July 10, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;figcaption&gt;Evidence that programming isn’t rocket science&lt;/figcaption&gt;&lt;/figure&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Evidence that programming isn’t rocket scienceIt’s not rocket science, but that doesn’t mean it’s not difficult (and it definitely doesn’t mean you won’t struggle). As a student who was used to feeling self-assured in classroom settings, this is far and away the most valuable lesson I learned: hard work is its own reward, not simply because trying and failing builds character, but because it’s fundamentally how human cognition works.  As The Khan Academy founder Salman Khan writes in his excellent blog post &lt;a href=&quot;https://www.khanacademy.org/about/blog/post/95208400815/the-learning-myth-why-ill-never-tell-my-son-hes&quot;&gt;“The Learning Myth: Why I’ll Never Tell My Son He’s Smart”&lt;/a&gt;:&lt;/p&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;Researchers have known for some time that the brain is like a muscle; that the more you use it, the more it grows. They’ve found that neural connections form and deepen most when we make mistakes doing difficult tasks rather than repeatedly having success with easy ones. What this means is that our intelligence is not fixed, and the best way that we can grow our intelligence is to embrace tasks where we might struggle and fail.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;figure&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Accomplishment of the day: implemented my first SQLite database.&amp;#10;&amp;#10;Status: &lt;a href=&quot;http://t.co/Qu2V3DobvH&quot;&gt;http://t.co/Qu2V3DobvH&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alessia Bellisario (@alessbell) &lt;a href=&quot;https://twitter.com/alessbell/status/477538263239249921&quot;&gt;June 13, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;figcaption&gt;It’s best to keep a stash of Kristen Wiig gifs on hand for moments of triumph&lt;/figcaption&gt;&lt;/figure&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;At Bitmaker Labs, perhaps more than anything else, you will struggle and fail. That’s what makes it such a fantastic place to learn. While attempting to build rails apps on my own, I’d make moderate progress, hit a stumbling block I couldn’t overcome, get discouraged and walk away from the computer. Instead, at Bitmaker, there were signs posted around the classroom with a short list of steps to follow when you found yourself stuck on a problem and ready to toss your MacBook out of the nearest window: first, try to troubleshoot it (learn to read even the most opaque error messages, find the right answers on Stack Overflow, etc.), but after ten or fifteen minutes of struggling on your own — generally the point at which spinning your wheels becomes significantly less productive — find an instructor to give you the boost you need to keep going.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Fun Fact: since Ruby 1.9.2, Time method can represent 1823-11-12 to 2116-02-20.&amp;#10;&amp;#10;tl;dr: In 102 yrs, all our OpenTable clones will break.&lt;/p&gt;&amp;mdash; Alessia Bellisario (@alessbell) &lt;a href=&quot;https://twitter.com/alessbell/status/482183801293254657&quot;&gt;June 26, 2014&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Invariably, the only way to get to the right answer with any degree of consistency is to get the hundred or so wrong answers out of your system until the right one becomes muscle memory. As I came to discover, the core feature of a program like Bitmaker Labs is that it accelerates the feedback loop to enable you to fail faster, more often and in the most constructive environment possible. As it turns out, this is terrible for your ego but exceptionally effective where it counts: learning new and difficult things.&lt;/p&gt;

&lt;figure&gt;&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;The eve of our final day &lt;a href=&quot;https://twitter.com/bitmakerlabs&quot;&gt;@bitmakerlabs&lt;/a&gt;!&amp;#10;&amp;#10;Current status: jQuerying with &lt;a href=&quot;https://twitter.com/BrandoCraft&quot;&gt;@BrandoCraft&lt;/a&gt; :) &lt;a href=&quot;http://t.co/9i9S02mRP4&quot;&gt;pic.twitter.com/9i9S02mRP4&lt;/a&gt;&lt;/p&gt;&amp;mdash; Alessia Bellisario (@alessbell) &lt;a href=&quot;https://twitter.com/alessbell/status/494993315649974274&quot;&gt;July 31, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;figcaption&gt;Our final project, made with love by me and &lt;a href=&quot;https://twitter.com/BrandoCraft&quot;&gt;@BrandoCraft: &lt;a href=&quot;http://drrubric.herokuapp.com/&quot;&gt;Dr. Rubric&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;hr&gt;

&lt;p&gt;Over the next while, I’ll be writing a bit more about my experiences post-Bitmaker. In the meantime, feel free to send me a note at alessia@breather.com or @alessbell on twitter with any questions I’ve yet to answer.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/from-bitmaker-to-breather&quot;&gt;From Bitmaker to Breather&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; on March 03, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Coding != Computer Science]]></title>
 <link rel="alternate" type="text/html" href="/coding-does-not-equal-computer-science" />
  <id>/Coding-Does-Not-Equal-Computer-Science</id>
  <published>2014-07-07T00:00:00-04:00</published>
  <updated>2014-07-07T00:00:00-04:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;h1&gt;Coding != Computer Science&lt;/h1&gt;

&lt;p&gt;Listening to David Heinemeier Hansson deliver the &lt;a href=&quot;https://www.youtube.com/watch?v=9LfmrkyP81M&quot;&gt;RailsConf keynote&lt;/a&gt; a little over two months ago was, for me, a minor revelation. It was exam season in my final semester of university and I had several philosophy finals bearing down on me. As I began organizing my notes, I came across a link on Twitter and fired up the conference livestream. What began as white noise in the background quickly piqued my interest. Soon enough, I found myself glued to the screen.&lt;/p&gt;

&lt;p&gt;Growing up in Copenhagen, DHH loved tinkering with computers and tried to learn programming on three separate occasions. In retrospect, he says, his early, uninspiring attempts at writing software had one important thing in common: each time he had tried and failed, Hansson had encountered programming in the context of computer science. As a gamer and aspiring video game developer, some of his first attempts at programming were in the esoteric language &lt;a href=&quot;http://en.wikipedia.org/wiki/BASIC&quot;&gt;AMOS Basic&lt;/a&gt;. There was plenty of math and physics involved and Hansson has the report cards to prove his lack of scientific aptitude. He was an F student in math and physics, but an A student in English.&lt;/p&gt;

&lt;p&gt;Years passed. Closer to the age of 20, Hansson finally learned to program. Three years later, he invented &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby on Rails&lt;/a&gt;, the open source web application framework I&amp;#39;m learning here at Bitmaker Labs nearly ten years later. If your understanding of programming is based largely on the way it&amp;#39;s depicted in popular culture, you may be wondering: &lt;em&gt;how could that possibly be&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Stories like Hansson&amp;#39;s are inconvenient exceptions to many of the storied myths of programming. From the outside looking in, many believe that what software engineers do is, in reality, a hard science akin to &lt;a href=&quot;http://en.wikipedia.org/wiki/Linus_Torvalds&quot;&gt;Linus Torvalds&amp;#39;&lt;/a&gt; development of the Linux kernel, and that in order to be a proficient programmer it&amp;#39;s best to start parsing Ruby docs in pre-K. Worse still, many programmers wish that were the case (Hansson calls this hitting them in their &amp;quot;impostor plexus&amp;quot;). In reality, Hansson says, writing software is less like engineering and more like studying 17th century French poetry: when reading other people&amp;#39;s programs, most of his time is spent wondering &amp;quot;what the f--k did this guy mean?&amp;quot;&lt;/p&gt;

&lt;p&gt;Point taken—and now that I&amp;#39;ve waded through other people&amp;#39;s code, I can fully attest to this. The analogy elicits a few chuckles from the audience, but it also succeeds in getting the message across. In DHH&amp;#39;s view, writing software boils down to precisely that: &lt;em&gt;writing&lt;/em&gt;. He uses this notion of computer science as a liberal art (&lt;a href=&quot;https://www.youtube.com/watch?v=IY7EsTnUSxY&quot;&gt;a kind of cognitive re-framing of the discipline popularized by Steve Jobs&lt;/a&gt;) to further argue that, while there will always be a place for unit testing and optimization, prioritizing metrics ahead of system architecture is fundamentally wrongheaded because it sacrifices sound system design on the altar of objective science.&lt;/p&gt;

&lt;p&gt;As a web developer-in-training, I prefer to view the issue of testing and TDD with a bit more nuance (&lt;a href=&quot;https://www.destroyallsoftware.com/blog/2014/tdd-straw-men-and-rhetoric&quot;&gt;this is a great piece&lt;/a&gt; if you&amp;#39;re interested in the other side of the story), but hearing DHH challenge the computer science paradigm was a much-needed reminder that, despite a lack of formal computer science education, programming is still very much &amp;quot;for me.&amp;quot; This may seem like a trite realization, but as someone who loved studying the humanities in university while maintaining a strong interest in software development, it was a relief to hear that the two aren&amp;#39;t mutually exclusive. In fact, they may be more directly related than previously imagined.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;#39;ll be writing more about my experience at Bitmaker Labs in the weeks to come; feel free to get in touch if you have any questions. You should follow me on twitter at &lt;a href=&quot;http://www.twitter.com/alessbell&quot;&gt;@alessbell&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/coding-does-not-equal-computer-science&quot;&gt;Coding != Computer Science&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; on July 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Code and Camaraderie]]></title>
 <link rel="alternate" type="text/html" href="/code-and-camaraderie" />
  <id>/Week-One</id>
  <published>2014-06-06T00:00:00-04:00</published>
  <updated>2014-06-06T00:00:00-04:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;h1&gt;Code and Camaraderie&lt;/h1&gt;

&lt;p&gt;Week one at Bitmaker Labs is quickly drawing to a close. It is 7:01 EST and eight students of a cohort of thirty-five remain: those of us still making our way through coding challenges and a few kind classmates willing to stick it out on a Friday night to lend a helping hand. Bitmaker co-founder Will Richman has been quietly typing away at a desk among students and instructors doing much of the same, but the room is a bit too quiet for a Friday night. Will swivels around in his chair: “Anyone want a beer? Maybe some music?”&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*7OzQX9jjmFXIUjnDhVCnjg.jpeg&quot; title=&quot;The author&#39;s view at time of writing&quot;&gt;&lt;img src=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*7OzQX9jjmFXIUjnDhVCnjg.jpeg&quot; alt=&quot;The author&#39;s view at time of writing.&quot;&gt;&lt;/a&gt;&lt;figcaption&gt;&lt;a href=&quot;https://d262ilb51hltx0.cloudfront.net/max/800/1*7OzQX9jjmFXIUjnDhVCnjg.jpeg&quot; title=&quot;The author&#39;s view at time of writing.&quot;&gt;The author&#39;s view at time of writing.&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;New Order’s “Bizarre Love Triangle” plays on the stereo as bottles of Keith’s are handed out. The group that remains is in for the long haul (those who’ve headed out for the weekend have long since completed the assignment due Monday), but at Bitmaker, camaraderie—and Songza—are the perfect complements to a long day of hard work. It’s only the first week but nearly everyone is talking about coming in on Saturday for more of the same.&lt;/p&gt;

&lt;p&gt;I could write a few hundred words on the attendant highs and lows of week one, but, frankly, I have code that needs refactoring. The intellectual roller coaster ride that is learning to program is equal parts exhilarating and exhausting, but the satisfaction of writing a working command line CRM program is unlike anything I’ve experienced. With week one in the books, there is much to look forward to: in week two, we’ll be building our first web application and learning more about the inner workings of the web. Stay tuned for more dispatches from 220 King Street West.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;#39;ll be writing more about my experience at Bitmaker Labs in the weeks to come; feel free to get in touch if you have any questions. You should follow me on twitter at &lt;a href=&quot;http://www.twitter.com/alessbell&quot;&gt;@alessbell&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/code-and-camaraderie&quot;&gt;Code and Camaraderie&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; on June 06, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Practice Makes Permanent]]></title>
 <link rel="alternate" type="text/html" href="/practice-makes-permanent" />
  <id>/practice-makes-permanent</id>
  <published>2014-05-23T00:00:00-04:00</published>
  <updated>2014-05-23T00:00:00-04:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;h1&gt;Practice Makes Permanent&lt;/h1&gt;

&lt;p&gt;Having signed up for the June cohort in December, I had a few months to work on the Bitmaker prep course which consists mainly of the Codecademy Ruby track, Ruby Monk, the Command Line Crash Course and a primer on Git and HTML/CSS. The material was easy enough to get through the first time, but when it came to internalizing a whole host of new concepts in a short period of time, I knew I needed a better strategy.&lt;/p&gt;

&lt;p&gt;As I began fine-tuning my daily routine, the words of an old high school coach came to mind: &amp;quot;Practice makes permanent; &lt;em&gt;perfect&lt;/em&gt; practice makes perfect.&amp;quot;&lt;/p&gt;

&lt;p&gt;After skimming through every list of Ruby tutorials/drills/videos I could get my hands on, I came across a few incredibly helpful articles on spaced repetition learning + programming. You can read them &lt;a href=&quot;https://medium.com/medium-redef/5481606b087a&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://sivers.org/srs&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://www.supermemo.com/articles/20rules.htm&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://www.jackkinsella.ie/2011/12/05/janki-method.html&quot;&gt;here&lt;/a&gt;. I also found some of the textbooks mentioned &lt;a href=&quot;http://blog.mediumequalsmessage.com/6-best-learning-ruby-books&quot;&gt;here on Chris Webb&amp;#39;s blog&lt;/a&gt; to be quite useful, and found the curriculum at &lt;a href=&quot;http://www.theodinproject.com/&quot;&gt;The Odin Project&lt;/a&gt; to be invaluable, as well.&lt;/p&gt;

&lt;p&gt;Most of the articles on spaced repetition learning cited above refer to a free flash card program called Anki to reinforce concepts/improve retention. Using a few lists of questions I came across on The Odin Project, I made a few decks of flash cards on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alessbell/alessbell.github.io/blob/master/flash%20cards/Arrays.apkg?raw=true&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alessbell/alessbell.github.io/blob/master/flash%20cards/Hashes.apkg?raw=true&quot;&gt;Hashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alessbell/alessbell.github.io/blob/master/flash%20cards/Numbers.apkg?raw=true&quot;&gt;Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alessbell/alessbell.github.io/blob/master/flash%20cards/Strings.apkg?raw=true&quot;&gt;Strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can grab Anki &lt;a href=&quot;http://ankisrs.net/&quot;&gt;here&lt;/a&gt; and my flash card files can be downloaded from the links above. Which coding resources do you find particularly helpful?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;#39;ll be writing more about my experience at Bitmaker Labs in the weeks to come; feel free to get in touch if you&amp;#39;re considering a similar program and have any questions. You should follow me on twitter at &lt;a href=&quot;http://www.twitter.com/alessbell&quot;&gt;@alessbell&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/practice-makes-permanent&quot;&gt;Practice Makes Permanent&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; on May 23, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Hello World]]></title>
 <link rel="alternate" type="text/html" href="/hello-world" />
  <id>/hello-world</id>
  <published>2014-05-23T00:00:00-04:00</published>
  <updated>2014-05-23T00:00:00-04:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;h1&gt;Hello World&lt;/h1&gt;

&lt;p&gt;It&amp;#39;s been more than five months since I first stepped foot in the old Bitmaker Labs office space on Duncan Street for my interview with Erik and Minh. At the time, I was parsing through college curricula for post-grad programs in web development, contemplating the LSAT and facing down a daunting fork in the road as my final semester at the University of Toronto drew near.&lt;/p&gt;

&lt;p&gt;Deciding on a single path post-graduation was predictably tough: on the one hand, I&amp;#39;ve thoroughly enjoyed my course of studies over the past few years in political theory and ethics. On the other hand, I&amp;#39;m all too familiar with the Jessica Hische-ism &amp;quot;&lt;a href=&quot;http://jessicahische.is/aprocrastiworker&quot;&gt;procrastiwork&lt;/a&gt;&amp;quot;: throughout undergrad, the freelance web design work I took on became affectionately known as &amp;quot;the work I do when I should be doing other work.&amp;quot;&lt;/p&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;It took a few years of growth and self-reflection to finally realize that my impulse to create things on the web is a feature, not a bug, of my personal and professional interests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;As a political staffer at city hall (during the infamous &lt;a href=&quot;http://en.wikipedia.org/wiki/Timeline_of_Rob_Ford_video_scandal&quot;&gt;Summer of Crack&lt;/a&gt;, no less), I happily took on a range of duties that fell under the umbrella of digital communications. Eventually, however, the urge to develop new and better tools outgrew my job description and fledgling skill set. I began exploring a range of free or inexpensive online options: &lt;a href=&quot;https://onemonthrails.com/&quot;&gt;One Month Rails&lt;/a&gt; and &lt;a href=&quot;http://www.codecademy.com/tracks/ruby&quot;&gt;Codecademy&lt;/a&gt; would manage to keep me occupied for a day or two at a time, but I quickly realized that, while a primer on Ruby on Rails was a great start, I was seeking a more robust program.&lt;/p&gt;

&lt;h3&gt;Enter Bitmaker Labs&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ll spare you my own explanation of coding bootcamps and their relative merits: &lt;a href=&quot;http://www.quora.com/Programming-Bootcamps/Are-programming-boot-camps-worth-it&quot;&gt;Quora&lt;/a&gt; and &lt;a href=&quot;http://eewang.github.io/blog/2013/10/17/are-dev-bootcamps-a-scam-an-alums-perspective/&quot;&gt;Hacker News&lt;/a&gt; are equally good places to begin your research if you&amp;#39;re considering a similar program. The important point, however, seems to me to be this: seeing as a coding bootcamp provides you with a wealth of educational resources and a relatively brief period of time in which to take advantage of them, a person&amp;#39;s relative success is a function of effort and effective use of time.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;#39;ll be writing more about my experience at Bitmaker Labs in the weeks to come; feel free to get in touch if you have any questions. You should follow me on twitter at &lt;a href=&quot;http://www.twitter.com/alessbell&quot;&gt;@alessbell&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/hello-world&quot;&gt;Hello World&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;&lt;/a&gt; on May 23, 2014.&lt;/p&gt;</content>
</entry>

</feed>
